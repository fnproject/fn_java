/*
 * fn
 * The open source serverless platform.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * Fn
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-27T15:47:31.669Z")
public class Fn {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("app_id")
  private String appId = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("memory")
  private Integer memory = null;

  @SerializedName("timeout")
  private Integer timeout = 30;

  @SerializedName("idle_timeout")
  private Integer idleTimeout = 30;

  @SerializedName("config")
  private Map<String, String> config = null;

  @SerializedName("annotations")
  private Map<String, Object> annotations = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

   /**
   * Unique identifier
   * @return id
  **/
  @ApiModelProperty(value = "Unique identifier")
  public String getId() {
    return id;
  }

  public Fn name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Unique name for this function.
   * @return name
  **/
  @ApiModelProperty(value = "Unique name for this function.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Fn appId(String appId) {
    this.appId = appId;
    return this;
  }

   /**
   * App ID.
   * @return appId
  **/
  @ApiModelProperty(value = "App ID.")
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }

  public Fn image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Full container image name, e.g. hub.docker.com/fnproject/yo or fnproject/yo (default registry: hub.docker.com)
   * @return image
  **/
  @ApiModelProperty(value = "Full container image name, e.g. hub.docker.com/fnproject/yo or fnproject/yo (default registry: hub.docker.com)")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public Fn memory(Integer memory) {
    this.memory = memory;
    return this;
  }

   /**
   * Maximum usable memory given to function (MiB).
   * @return memory
  **/
  @ApiModelProperty(value = "Maximum usable memory given to function (MiB).")
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }

  public Fn timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Timeout for executions of a function. Value in Seconds.
   * @return timeout
  **/
  @ApiModelProperty(value = "Timeout for executions of a function. Value in Seconds.")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public Fn idleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

   /**
   * Hot functions idle timeout before container termination. Value in Seconds.
   * @return idleTimeout
  **/
  @ApiModelProperty(value = "Hot functions idle timeout before container termination. Value in Seconds.")
  public Integer getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(Integer idleTimeout) {
    this.idleTimeout = idleTimeout;
  }

  public Fn config(Map<String, String> config) {
    this.config = config;
    return this;
  }

  public Fn putConfigItem(String key, String configItem) {
    if (this.config == null) {
      this.config = new HashMap<String, String>();
    }
    this.config.put(key, configItem);
    return this;
  }

   /**
   * Function configuration key values.
   * @return config
  **/
  @ApiModelProperty(value = "Function configuration key values.")
  public Map<String, String> getConfig() {
    return config;
  }

  public void setConfig(Map<String, String> config) {
    this.config = config;
  }

  public Fn annotations(Map<String, Object> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Fn putAnnotationsItem(String key, Object annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<String, Object>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Func annotations - this is a map of annotations attached to this func, keys must not exceed 128 bytes and must consist of non-whitespace printable ascii characters, and the seralized representation of individual values must not exeed 512 bytes.
   * @return annotations
  **/
  @ApiModelProperty(value = "Func annotations - this is a map of annotations attached to this func, keys must not exceed 128 bytes and must consist of non-whitespace printable ascii characters, and the seralized representation of individual values must not exeed 512 bytes.")
  public Map<String, Object> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, Object> annotations) {
    this.annotations = annotations;
  }

   /**
   * Time when function was created. Always in UTC RFC3339.
   * @return createdAt
  **/
  @ApiModelProperty(value = "Time when function was created. Always in UTC RFC3339.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Most recent time that function was updated. Always in UTC RFC3339.
   * @return updatedAt
  **/
  @ApiModelProperty(value = "Most recent time that function was updated. Always in UTC RFC3339.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fn fn = (Fn) o;
    return Objects.equals(this.id, fn.id) &&
        Objects.equals(this.name, fn.name) &&
        Objects.equals(this.appId, fn.appId) &&
        Objects.equals(this.image, fn.image) &&
        Objects.equals(this.memory, fn.memory) &&
        Objects.equals(this.timeout, fn.timeout) &&
        Objects.equals(this.idleTimeout, fn.idleTimeout) &&
        Objects.equals(this.config, fn.config) &&
        Objects.equals(this.annotations, fn.annotations) &&
        Objects.equals(this.createdAt, fn.createdAt) &&
        Objects.equals(this.updatedAt, fn.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, appId, image, memory, timeout, idleTimeout, config, annotations, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fn {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

