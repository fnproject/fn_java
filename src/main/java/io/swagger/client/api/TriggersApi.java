/*
 * fn
 * The open source serverless platform.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Trigger;
import io.swagger.client.model.TriggerList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TriggersApi {
    private ApiClient apiClient;

    public TriggersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TriggersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTrigger
     * @param body Trigger data to insert. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTriggerCall(Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/triggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTriggerValidateBeforeCall(Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTrigger(Async)");
        }
        

        com.squareup.okhttp.Call call = createTriggerCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create A New Trigger.
     * Creates a new Trigger, returning the complete entity.
     * @param body Trigger data to insert. (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trigger createTrigger(Trigger body) throws ApiException {
        ApiResponse<Trigger> resp = createTriggerWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create A New Trigger.
     * Creates a new Trigger, returning the complete entity.
     * @param body Trigger data to insert. (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trigger> createTriggerWithHttpInfo(Trigger body) throws ApiException {
        com.squareup.okhttp.Call call = createTriggerValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create A New Trigger. (asynchronously)
     * Creates a new Trigger, returning the complete entity.
     * @param body Trigger data to insert. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTriggerAsync(Trigger body, final ApiCallback<Trigger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTriggerValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTrigger
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerCall(String triggerID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/triggers/{triggerID}"
            .replaceAll("\\{" + "triggerID" + "\\}", apiClient.escapeString(triggerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTriggerValidateBeforeCall(String triggerID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'triggerID' is set
        if (triggerID == null) {
            throw new ApiException("Missing the required parameter 'triggerID' when calling deleteTrigger(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTriggerCall(triggerID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete A Trigger
     * Delete the specified Trigger.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTrigger(String triggerID) throws ApiException {
        deleteTriggerWithHttpInfo(triggerID);
    }

    /**
     * Delete A Trigger
     * Delete the specified Trigger.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTriggerWithHttpInfo(String triggerID) throws ApiException {
        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(triggerID, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete A Trigger (asynchronously)
     * Delete the specified Trigger.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerAsync(String triggerID, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(triggerID, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTrigger
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTriggerCall(String triggerID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/triggers/{triggerID}"
            .replaceAll("\\{" + "triggerID" + "\\}", apiClient.escapeString(triggerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTriggerValidateBeforeCall(String triggerID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'triggerID' is set
        if (triggerID == null) {
            throw new ApiException("Missing the required parameter 'triggerID' when calling getTrigger(Async)");
        }
        

        com.squareup.okhttp.Call call = getTriggerCall(triggerID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Definition Of A Trigger
     * Gets the definition for the Trigger with the specified ID.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trigger getTrigger(String triggerID) throws ApiException {
        ApiResponse<Trigger> resp = getTriggerWithHttpInfo(triggerID);
        return resp.getData();
    }

    /**
     * Get Definition Of A Trigger
     * Gets the definition for the Trigger with the specified ID.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trigger> getTriggerWithHttpInfo(String triggerID) throws ApiException {
        com.squareup.okhttp.Call call = getTriggerValidateBeforeCall(triggerID, null, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Definition Of A Trigger (asynchronously)
     * Gets the definition for the Trigger with the specified ID.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTriggerAsync(String triggerID, final ApiCallback<Trigger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTriggerValidateBeforeCall(triggerID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTriggers
     * @param appId Application ID. (optional)
     * @param fnId Function ID. (optional)
     * @param cursor Cursor from previous response.next_cursor to begin results after, if any. (optional)
     * @param perPage Number of results to return, defaults to 30. Max of 100. (optional)
     * @param name A Trigger name to filter by. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTriggersCall(String appId, String fnId, String cursor, Integer perPage, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/triggers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("app_id", appId));
        if (fnId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fn_id", fnId));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTriggersValidateBeforeCall(String appId, String fnId, String cursor, Integer perPage, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listTriggersCall(appId, fnId, cursor, perPage, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get A List Of Triggers Within An Application Or Function
     * This will list all Triggers for a particular Application or Function, returned in name alphabetical order.
     * @param appId Application ID. (optional)
     * @param fnId Function ID. (optional)
     * @param cursor Cursor from previous response.next_cursor to begin results after, if any. (optional)
     * @param perPage Number of results to return, defaults to 30. Max of 100. (optional)
     * @param name A Trigger name to filter by. (optional)
     * @return TriggerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TriggerList listTriggers(String appId, String fnId, String cursor, Integer perPage, String name) throws ApiException {
        ApiResponse<TriggerList> resp = listTriggersWithHttpInfo(appId, fnId, cursor, perPage, name);
        return resp.getData();
    }

    /**
     * Get A List Of Triggers Within An Application Or Function
     * This will list all Triggers for a particular Application or Function, returned in name alphabetical order.
     * @param appId Application ID. (optional)
     * @param fnId Function ID. (optional)
     * @param cursor Cursor from previous response.next_cursor to begin results after, if any. (optional)
     * @param perPage Number of results to return, defaults to 30. Max of 100. (optional)
     * @param name A Trigger name to filter by. (optional)
     * @return ApiResponse&lt;TriggerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TriggerList> listTriggersWithHttpInfo(String appId, String fnId, String cursor, Integer perPage, String name) throws ApiException {
        com.squareup.okhttp.Call call = listTriggersValidateBeforeCall(appId, fnId, cursor, perPage, name, null, null);
        Type localVarReturnType = new TypeToken<TriggerList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get A List Of Triggers Within An Application Or Function (asynchronously)
     * This will list all Triggers for a particular Application or Function, returned in name alphabetical order.
     * @param appId Application ID. (optional)
     * @param fnId Function ID. (optional)
     * @param cursor Cursor from previous response.next_cursor to begin results after, if any. (optional)
     * @param perPage Number of results to return, defaults to 30. Max of 100. (optional)
     * @param name A Trigger name to filter by. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTriggersAsync(String appId, String fnId, String cursor, Integer perPage, String name, final ApiCallback<TriggerList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTriggersValidateBeforeCall(appId, fnId, cursor, perPage, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TriggerList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTrigger
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param body Trigger data to merge into current value. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTriggerCall(String triggerID, Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/triggers/{triggerID}"
            .replaceAll("\\{" + "triggerID" + "\\}", apiClient.escapeString(triggerID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTriggerValidateBeforeCall(String triggerID, Trigger body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'triggerID' is set
        if (triggerID == null) {
            throw new ApiException("Missing the required parameter 'triggerID' when calling updateTrigger(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTrigger(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTriggerCall(triggerID, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update A Trigger
     * Updates a Trigger by merging the provided values.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param body Trigger data to merge into current value. (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trigger updateTrigger(String triggerID, Trigger body) throws ApiException {
        ApiResponse<Trigger> resp = updateTriggerWithHttpInfo(triggerID, body);
        return resp.getData();
    }

    /**
     * Update A Trigger
     * Updates a Trigger by merging the provided values.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param body Trigger data to merge into current value. (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trigger> updateTriggerWithHttpInfo(String triggerID, Trigger body) throws ApiException {
        com.squareup.okhttp.Call call = updateTriggerValidateBeforeCall(triggerID, body, null, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update A Trigger (asynchronously)
     * Updates a Trigger by merging the provided values.
     * @param triggerID Opaque, unique Trigger ID. (required)
     * @param body Trigger data to merge into current value. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTriggerAsync(String triggerID, Trigger body, final ApiCallback<Trigger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTriggerValidateBeforeCall(triggerID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
